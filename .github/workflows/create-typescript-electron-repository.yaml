name: Create TypeScript Electron Repository

on:
  workflow_dispatch:
    inputs:
      repo_name:
        description: 'Repository name'
        required: true
      description:
        description: 'Repository description'
        required: false
        default: 'An Electron application built with TypeScript'
      author_name:
        description: 'Author name'
        required: true
      author_email:
        description: 'Author email'
        required: true
      build_tool:
        description: 'Choose Your Build Tool'
        required: true
        type: choice
        options:
          - electron-with-typescript
          - electron-forge-with-webpack
          - vite-ts
          - vite-react-ts
          - vite-vue-ts
        default: 'vite-ts'
      ts_target:
        description: 'TypeScript target'
        required: false
        default: 'ES2024'
      ts_module:
        description: 'TypeScript module system'
        required: false
        default: 'CommonJS'
      ts_module_resolution:
        description: 'TypeScript module resolution'
        required: false
        default: 'node'
      private:
        description: 'Private repository'
        required: false
        default: 'false'
        type: boolean

jobs:
  create-electron-repository:
    runs-on: ubuntu-latest
    
    steps:
    - name: Step 1 - Checkout code
      uses: actions/checkout@v3
      
    - name: Step 2 - Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'
        
    - name: Step 3 - Generate Electron with TypeScript
      if: ${{ github.event.inputs.build_tool == 'electron-with-typescript' || github.event.inputs.build_tool == '' }}
      run: |
        # Create Electron TypeScript project
        npx create-electron-app "${{ github.event.inputs.repo_name }}"
        
        # Install additional dependencies
        cd "${{ github.event.inputs.repo_name }}"
        npm install --save-dev typescript @types/node electron-typescript-definitions copyfiles nodemon
        
        # Install js-to-ts-converter without saving to package.json
        npm install js-to-ts-converter --no-save
        
        # Rename index.js to main.js if it exists
        if [ -f "src/index.js" ]; then
          mv src/index.js src/main.js
          echo "Renamed src/index.js to src/main.js"
          
          # Update any references to index.js in other files
          find src -type f -not -name "main.js" -exec sed -i 's/index\.js/main.js/g' {} \;
        fi
        
        # Convert JS files to TS
        echo "Converting JavaScript files to TypeScript..."
        npx js-to-ts-converter src
                
        # Create custom tsconfig.json
        cat > tsconfig.json << EOF
        {
          "compilerOptions": {
            "target": "${{ github.event.inputs.ts_target }}",
            "module": "${{ github.event.inputs.ts_module }}",
            "moduleResolution": "${{ github.event.inputs.ts_module_resolution }}",
            "outDir": "./dist",
            "rootDir": "./src",
            "strict": true,
            "esModuleInterop": true,
            "sourceMap": true,
            "baseUrl": "."
          },
          "include": ["src/**/*"]
        }
        EOF
        
        # Modify package.json
        cat > update_package.js << 'EOF'
        const fs = require('fs');
        const packageJson = JSON.parse(fs.readFileSync('./package.json', 'utf8'));
        
        // Update author information
        packageJson.author = {
          name: "${{ github.event.inputs.author_name }}",
          email: "${{ github.event.inputs.author_email }}"
        };
        
        // Update description
        packageJson.description = "${{ github.event.inputs.description }}";
        
        // Update main entry point
        packageJson.main = "dist/main.js";
        
        // Update scripts
        packageJson.scripts = {
          ...packageJson.scripts,
          "build": "tsc && copyfiles -u 1 src/**/*.html src/**/*.css src/assets/** dist/",
          "watch": "tsc -w",
          "start": "npm run build && electron-forge start",
          "dev": "nodemon --exec \"npm run build && electron-forge start\" --watch src --ext ts,tsx,html,css"
        };
        
        fs.writeFileSync('./package.json', JSON.stringify(packageJson, null, 2));
        EOF
        
        node update_package.js
        rm update_package.js

    - name: Step 3b - Generate Electron with Forge and Webpack
      if: ${{ github.event.inputs.build_tool == 'electron-forge-with-webpack' }}
      run: |
        # Create Electron app with webpack template
        npx create-electron-app "${{ github.event.inputs.repo_name }}" --template=webpack
        cd "${{ github.event.inputs.repo_name }}"
        
        # Install TypeScript and related dependencies
        npm install --save-dev typescript ts-loader
        npm install --save-dev style-loader css-loader
        npm install --save-dev sass sass-loader
        npm install --save-dev electron-forge
        
        # Install js-to-ts-converter without saving to package.json
        npm install js-to-ts-converter --no-save
        
        # Convert JS files to TS
        npx js-to-ts-converter src
        
        # Update webpack.main.config.js for TypeScript
        cat > webpack.main.config.js << 'EOF'
        module.exports = {
          entry: './src/main.ts',
          module: {
            rules: [
              {
                test: /\.tsx?$/,
                use: 'ts-loader',
                exclude: /node_modules/,
              },
            ],
          },
          resolve: {
            extensions: ['.tsx', '.ts', '.js'],
          },
        };
        EOF
        
        # Update webpack.renderer.config.js for TypeScript and CSS
        cat > webpack.renderer.config.js << 'EOF'
        module.exports = {
          module: {
            rules: [
              {
                test: /\.tsx?$/,
                use: 'ts-loader',
                exclude: /node_modules/,
              },
              {
                test: /\.s[ac]ss$/i,
                use: ['style-loader', 'css-loader', 'sass-loader'],
              },
              {
                test: /\.css$/i,
                use: ['style-loader', 'css-loader'],
              },
              {
                test: /\.(png|svg|jpg|jpeg|gif)$/i,
                type: 'asset/resource',
              },
            ],
          },
          resolve: {
            extensions: ['.tsx', '.ts', '.js'],
          },
        };
        EOF
        
        # Create a basic tsconfig.json
        cat > tsconfig.json << 'EOF'
        {
          "compilerOptions": {
            "target": "${{ github.event.inputs.ts_target }}",
            "module": "${{ github.event.inputs.ts_module }}",
            "esModuleInterop": true
          },
          "include": ["src/**/*"]
        }
        EOF
        
        # Update forge.config.js to use TypeScript files and add fuses plugin
        cat > update_forge_config.js << 'EOF'
        const fs = require('fs');
        const forgeConfig = require('./forge.config.js');
        
        // Update entry points to use TypeScript files
        if (forgeConfig.plugins && forgeConfig.plugins.length > 0) {
          const webpackPlugin = forgeConfig.plugins.find(plugin => 
            plugin.name === '@electron-forge/plugin-webpack');
            
          if (webpackPlugin && webpackPlugin.config && webpackPlugin.config.mainConfig) {
            webpackPlugin.config.renderer.entryPoints = [
              {
                name: 'main_window',
                html: './src/index.html',
                js: './src/renderer.ts',
                preload: {
                  js: './src/preload.ts',
                },
              },
            ];
          }
        }
        
        // Add the fuses plugin if it doesn't already exist
        if (!forgeConfig.plugins.some(plugin => plugin.name === '@electron-forge/plugin-fuses')) {
          forgeConfig.plugins.push({
            "name": "@electron-forge/plugin-fuses",
            "config": {
              "version": 1,
              "fuses": {
                "runAsNode": false,
                "enableNodeCliInspectArguments": true,
                "enableEmbeddedAsarIntegrityValidation": false,
                "onlyLoadAppFromAsar": false,
                "loadBrowserProcessSpecificV8Snapshot": true,
                "enableCookieEncryption": true
              }
            }
          });
        }

        // White listed plugins
        whitelist_plugin_names = [
          "@electron-forge/plugin-auto-unpack-natives",
          "@electron-forge/plugin-webpack",
          "@electron-forge/plugin-fuses"
        ];

        // Remove any plugins that are not in the whitelist
        forgeConfig.plugins = forgeConfig.plugins.filter(plugin => 
          whitelist_plugin_names.includes(plugin.name));
        
        fs.writeFileSync('./forge.config.js', 
          `module.exports = ${JSON.stringify(forgeConfig, null, 2)}`);
        EOF
        
        node update_forge_config.js
        rm update_forge_config.js
        
        # Add TypeScript declarations in main.ts
        echo "// TypeScript declarations for Electron Forge Webpack" > src/declarations.d.ts
        echo "declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;" >> src/declarations.d.ts
        echo "declare const MAIN_WINDOW_WEBPACK_ENTRY: string;" >> src/declarations.d.ts
        
        # Update main.ts to import declarations
        sed -i '1i/// <reference path="./declarations.d.ts" />' src/main.ts
        
        # Modify package.json
        cat > update_package.js << 'EOF'
        const fs = require('fs');
        const packageJson = JSON.parse(fs.readFileSync('./package.json', 'utf8'));
        
        // Update author information
        packageJson.author = {
          name: "${{ github.event.inputs.author_name }}",
          email: "${{ github.event.inputs.author_email }}"
        };
        
        // Update description
        packageJson.description = "${{ github.event.inputs.description }}";
        
        // For webpack template, we don't need to update main entry point or scripts
        // as they are already correctly configured by the template
        
        fs.writeFileSync('./package.json', JSON.stringify(packageJson, null, 2));
        EOF
        
        node update_package.js
        rm update_package.js

    - name: Step 3c - Generate Electron with Vite
      if: ${{ startsWith(github.event.inputs.build_tool, 'vite-') }}
      run: |
        # Determine template based on build_tool selection
        TEMPLATE=""
        case "${{ github.event.inputs.build_tool }}" in
          "vite-ts")
            TEMPLATE="vanilla-ts"
            ;;
          "vite-react-ts")
            TEMPLATE="react-ts"
            ;;
          "vite-vue-ts")
            TEMPLATE="vue-ts"
            ;;
        esac
        
        # Convert repo name to lowercase for compatibility with electron-vite
        REPO_NAME_LOWER=$(echo "${{ github.event.inputs.repo_name }}" | tr '[:upper:]' '[:lower:]')

        # Create Electron app with selected template
        npm create @quick-start/electron "$REPO_NAME_LOWER" -- --template $TEMPLATE --skip

        # If repo name is different than lowercase version, rename directory
        if [ "$REPO_NAME_LOWER" != "${{ github.event.inputs.repo_name }}" ]; then
          mv "$REPO_NAME_LOWER" "${{ github.event.inputs.repo_name }}"
        fi

        cd "${{ github.event.inputs.repo_name }}"
        
        # Update package.json with metadata
        cat > update_package.js << 'EOF'
        const fs = require('fs');
        const packageJson = JSON.parse(fs.readFileSync('./package.json', 'utf8'));
        packageJson.author = {
          name: "${{ github.event.inputs.author_name }}",
          email: "${{ github.event.inputs.author_email }}"
        };
        packageJson.description = "${{ github.event.inputs.description }}";
        fs.writeFileSync('./package.json', JSON.stringify(packageJson, null, 2));
        EOF
        node update_package.js
        rm update_package.js

    - name: Step 4 - Create new GitHub repository
      run: |
        curl -X POST -H "Authorization: token ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}" \
             -d '{
                  "name": "${{ github.event.inputs.repo_name }}",
                  "description": "${{ github.event.inputs.description }}",
                  "private": ${{ github.event.inputs.private }}
                }' \
             https://api.github.com/user/repos

    - name: Step 5 - Push to new repository
      run: |
        cd "${{ github.event.inputs.repo_name }}"
        git config --global user.email "${{ github.event.inputs.author_email }}"
        git config --global user.name "${{ github.event.inputs.author_name }}"
        git init
        git add .
        git commit -m "Initialize Electron project with ${{ github.event.inputs.build_tool }}"
        git branch -M main
        git remote add origin git@github.com:${{ github.actor }}/${{ github.event.inputs.repo_name }}.git
        git remote set-url origin https://x-access-token:${{ env.GH_PERSONAL_ACCESS_TOKEN }}@github.com/${{ github.actor }}/${{ github.event.inputs.repo_name }}
        git push -u origin main
      env:
        GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}